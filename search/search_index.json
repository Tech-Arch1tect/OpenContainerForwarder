{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home OpenContainerForwarder is a project which aims to automate caddy configuration for proxying to docker containers. Container labels are used to configure specifics such as hostnames and container ports, etc. Quick start Full documentation","title":"Home"},{"location":"#home","text":"OpenContainerForwarder is a project which aims to automate caddy configuration for proxying to docker containers. Container labels are used to configure specifics such as hostnames and container ports, etc. Quick start Full documentation","title":"Home"},{"location":"Quick%20Start/","text":"Intro This page demonstrates an example deploy using the docker-compose configuration . Create docker network This network will have OpenContainerForwarder/Caddy and any Docker containers that will be proxied to. docker network create proxy Clone the base docker-compose setup cd /opt/ git clone https://github.com/Tech-Arch1tect/OpenContainerForwarder-base.git OpenContainerForwarder Copy example environment variables cd /opt/OpenContainerForwarder/ cp sample.env .env Review environment variables Check the VERSION variable is the latest version (or otherwise intended version) Unless you specifically want another TLS provider, it is advised to keep DEFAULT_TLS_PROVIDER=default Keep the web dashboard disabled - this is WIP/Insecure (and has no authentication currently) Start Open Container Forwarder & caddy cd /opt/OpenContainerForwarder docker-compose up -d Start an example container (gitea) Before proceeding please configure your DNS A record for your hostname to point at your server running OpenContainerforwarder (yourdomain.com will be used as an example) Gitea is used as an example service cd /opt/ mkdir gitea cd gitea; vi docker-compose.yml Paste in the following content (changing yourdomain.com to your domain): version: \"2\" networks: proxy: external: true services: gitea: image: gitea/gitea:latest restart: always networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\" Notes: The Gitea container is on the proxy network The labels define the hostname that will be configured in Caddy and the port that you want to proxy to (in this case Gitea is listening on port 3000 within the container) Start the gitea container docker-compose up -d Wait 30 seconds, and visit gitea.yourdomain.com. You should be presented with the gitea welcome page. If you have any issues checkout the trouble shooting examples and create a github issue if you need any assistance.","title":"Quick Start"},{"location":"Quick%20Start/#intro","text":"This page demonstrates an example deploy using the docker-compose configuration .","title":"Intro"},{"location":"Quick%20Start/#create-docker-network","text":"This network will have OpenContainerForwarder/Caddy and any Docker containers that will be proxied to. docker network create proxy","title":"Create docker network"},{"location":"Quick%20Start/#clone-the-base-docker-compose-setup","text":"cd /opt/ git clone https://github.com/Tech-Arch1tect/OpenContainerForwarder-base.git OpenContainerForwarder","title":"Clone the base docker-compose setup"},{"location":"Quick%20Start/#copy-example-environment-variables","text":"cd /opt/OpenContainerForwarder/ cp sample.env .env","title":"Copy example environment variables"},{"location":"Quick%20Start/#review-environment-variables","text":"Check the VERSION variable is the latest version (or otherwise intended version) Unless you specifically want another TLS provider, it is advised to keep DEFAULT_TLS_PROVIDER=default Keep the web dashboard disabled - this is WIP/Insecure (and has no authentication currently)","title":"Review environment variables"},{"location":"Quick%20Start/#start-open-container-forwarder-caddy","text":"cd /opt/OpenContainerForwarder docker-compose up -d","title":"Start Open Container Forwarder &amp; caddy"},{"location":"Quick%20Start/#start-an-example-container-gitea","text":"Before proceeding please configure your DNS A record for your hostname to point at your server running OpenContainerforwarder (yourdomain.com will be used as an example) Gitea is used as an example service cd /opt/ mkdir gitea cd gitea; vi docker-compose.yml Paste in the following content (changing yourdomain.com to your domain): version: \"2\" networks: proxy: external: true services: gitea: image: gitea/gitea:latest restart: always networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\" Notes: The Gitea container is on the proxy network The labels define the hostname that will be configured in Caddy and the port that you want to proxy to (in this case Gitea is listening on port 3000 within the container)","title":"Start an example container (gitea)"},{"location":"Quick%20Start/#start-the-gitea-container","text":"docker-compose up -d Wait 30 seconds, and visit gitea.yourdomain.com. You should be presented with the gitea welcome page. If you have any issues checkout the trouble shooting examples and create a github issue if you need any assistance.","title":"Start the gitea container"},{"location":"troubleshooting/","text":"When things go wrong! Submit a Github issue . Please file the bug report with the appropriate template & provide as much detail as possible. How to retrieve my caddyfile The generated caddyfile will be located at volumes/OpenContainerForwarder/config/Caddyfile","title":"Troubleshooting"},{"location":"troubleshooting/#when-things-go-wrong","text":"Submit a Github issue . Please file the bug report with the appropriate template & provide as much detail as possible.","title":"When things go wrong!"},{"location":"troubleshooting/#how-to-retrieve-my-caddyfile","text":"The generated caddyfile will be located at volumes/OpenContainerForwarder/config/Caddyfile","title":"How to retrieve my caddyfile"},{"location":"Documentation/","text":"Initial setup Quick start Container Labels open.container.forwarder.hostname open.container.forwarder.port open.container.forwarder.trustedproxies open.container.forwarder.logformat open.container.forwarder.protocol open.container.forwarder.cloudflareapikey open.container.forwarder.tlsprovider open.container.forwarder.restrictip","title":"Index"},{"location":"Documentation/#initial-setup","text":"Quick start","title":"Initial setup"},{"location":"Documentation/#container-labels","text":"open.container.forwarder.hostname open.container.forwarder.port open.container.forwarder.trustedproxies open.container.forwarder.logformat open.container.forwarder.protocol open.container.forwarder.cloudflareapikey open.container.forwarder.tlsprovider open.container.forwarder.restrictip","title":"Container Labels"},{"location":"Documentation/Labels/Access%20Logs/","text":"Synopsis OpenContainerForwarder configures access logs in Caddy named hostname .log. This label configures the logformat used. Label open.container.forwarder.logformat Value console or json are the only valid values, string Details It is planned to add new options to configure the access logs further (or disable per-hostname). e.g. to configure log rotation settings (currently Caddy defaults are used).","title":"Access Logs"},{"location":"Documentation/Labels/Access%20Logs/#synopsis","text":"OpenContainerForwarder configures access logs in Caddy named hostname .log. This label configures the logformat used.","title":"Synopsis"},{"location":"Documentation/Labels/Access%20Logs/#label","text":"open.container.forwarder.logformat","title":"Label"},{"location":"Documentation/Labels/Access%20Logs/#value","text":"console or json are the only valid values, string","title":"Value"},{"location":"Documentation/Labels/Access%20Logs/#details","text":"It is planned to add new options to configure the access logs further (or disable per-hostname). e.g. to configure log rotation settings (currently Caddy defaults are used).","title":"Details"},{"location":"Documentation/Labels/CloudflareApiKey/","text":"Synopsis This label configures the Cloudflare API key used for Cloudflare DNS. It is only utilised if the TLS provider is set to cloudflare Label open.container.forwarder.cloudflareapikey Value API Key, string Details Example usage: open.container.forwarder.cloudflareapikey=xxxxxxxx","title":"CloudflareApiKey"},{"location":"Documentation/Labels/CloudflareApiKey/#synopsis","text":"This label configures the Cloudflare API key used for Cloudflare DNS. It is only utilised if the TLS provider is set to cloudflare","title":"Synopsis"},{"location":"Documentation/Labels/CloudflareApiKey/#label","text":"open.container.forwarder.cloudflareapikey","title":"Label"},{"location":"Documentation/Labels/CloudflareApiKey/#value","text":"API Key, string","title":"Value"},{"location":"Documentation/Labels/CloudflareApiKey/#details","text":"Example usage: open.container.forwarder.cloudflareapikey=xxxxxxxx","title":"Details"},{"location":"Documentation/Labels/Hostname/","text":"Synopsis This label configures the SNI hostname that will be configured in Caddy. Caddy will use this/these hostnames for the SSL certificate. Label open.container.forwarder.hostname open.container.forwarder.hostname.* Value Valid hostname, string Details If only a single hostname is desired simply configure this with open.container.forwarder.hostname=my.hostname.com . If multiple hostnames are desired to proxy to the same container use the wildcard. e.g. to use one.hostname.com, two.hostname.com and three.hostname.com use the following labels: open.container.forwarder.hostname.1=one.hostname.com open.container.forwarder.hostname.2=two.hostname.com open.container.forwarder.hostname.3=three.hostname.com Each of these hostnames will be configured in Caddy.","title":"Hostname"},{"location":"Documentation/Labels/Hostname/#synopsis","text":"This label configures the SNI hostname that will be configured in Caddy. Caddy will use this/these hostnames for the SSL certificate.","title":"Synopsis"},{"location":"Documentation/Labels/Hostname/#label","text":"open.container.forwarder.hostname open.container.forwarder.hostname.*","title":"Label"},{"location":"Documentation/Labels/Hostname/#value","text":"Valid hostname, string","title":"Value"},{"location":"Documentation/Labels/Hostname/#details","text":"If only a single hostname is desired simply configure this with open.container.forwarder.hostname=my.hostname.com . If multiple hostnames are desired to proxy to the same container use the wildcard. e.g. to use one.hostname.com, two.hostname.com and three.hostname.com use the following labels: open.container.forwarder.hostname.1=one.hostname.com open.container.forwarder.hostname.2=two.hostname.com open.container.forwarder.hostname.3=three.hostname.com Each of these hostnames will be configured in Caddy.","title":"Details"},{"location":"Documentation/Labels/Port/","text":"Synopsis This label is used to determine which port should be proxied to within the container. Label open.container.forwarder.port Value Port, int Details If the software within the container is listening on port 8080 use the following label on the container open.container.forwarder.port=8080 OpenContainerForwarder attempts to guess the port if open.container.forwarder.port is not defined. The following flow is followed: if open.container.forwarder.port is defined, this port is used. if the container only exposes a single port, this port is used. if there are multiple exposed ports and one of them is 80, 80 is used. if there are multiple exposed ports and none of them are 80, the first exposed port found is used and a warning is issued that this is likely incorrect. if there are no exposed ports, port 80 is used and issue a warning that this is likely incorrect. It is always recommended to explicitly define open.container.forwarder.port to avoid confusion. This behaviour may change in the future. Defining open.container.forwarder.port is the only way to ensure no issues with future updates.","title":"Port"},{"location":"Documentation/Labels/Port/#synopsis","text":"This label is used to determine which port should be proxied to within the container.","title":"Synopsis"},{"location":"Documentation/Labels/Port/#label","text":"open.container.forwarder.port","title":"Label"},{"location":"Documentation/Labels/Port/#value","text":"Port, int","title":"Value"},{"location":"Documentation/Labels/Port/#details","text":"If the software within the container is listening on port 8080 use the following label on the container open.container.forwarder.port=8080 OpenContainerForwarder attempts to guess the port if open.container.forwarder.port is not defined. The following flow is followed: if open.container.forwarder.port is defined, this port is used. if the container only exposes a single port, this port is used. if there are multiple exposed ports and one of them is 80, 80 is used. if there are multiple exposed ports and none of them are 80, the first exposed port found is used and a warning is issued that this is likely incorrect. if there are no exposed ports, port 80 is used and issue a warning that this is likely incorrect. It is always recommended to explicitly define open.container.forwarder.port to avoid confusion. This behaviour may change in the future. Defining open.container.forwarder.port is the only way to ensure no issues with future updates.","title":"Details"},{"location":"Documentation/Labels/Protocol/","text":"Synopsis This label configures which protocol to use when forwarding to the container. e.g. if the container is listening on https then this should be configured with https. Defaults to http . Label open.container.forwarder.protocol Value http or https are the only valid options, string Details Example usage: http open.container.forwarder.protocol=http https open.container.forwarder.protocol=https","title":"Protocol"},{"location":"Documentation/Labels/Protocol/#synopsis","text":"This label configures which protocol to use when forwarding to the container. e.g. if the container is listening on https then this should be configured with https. Defaults to http .","title":"Synopsis"},{"location":"Documentation/Labels/Protocol/#label","text":"open.container.forwarder.protocol","title":"Label"},{"location":"Documentation/Labels/Protocol/#value","text":"http or https are the only valid options, string","title":"Value"},{"location":"Documentation/Labels/Protocol/#details","text":"Example usage: http open.container.forwarder.protocol=http https open.container.forwarder.protocol=https","title":"Details"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/","text":"Synopsis This label can be used to restrict access to a website to a CIDR range of IP's. Label open.container.forwarder.restrictip open.container.forwarder.restrictip.* Value CIDR range, string Details Example usage: Single CIDR range: open.container.forwarder.restrictip=x.x.x.x/XX Multiple ranges: open.container.forwarder.restrictip.1=x.x.x.x/XX open.container.forwarder.restrictip.2=x.x.x.x/XX open.container.forwarder.restrictip.3=x.x.x.x/XX Note If the website is behind another reverse proxy you will need to configure trusted proxies as well. Configuring a trusted proxy allows Caddy to trust the x-forwarded-for header sent from the proxy which will then be used to determine the visitors IP address.","title":"Restrict to IP addresses"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/#synopsis","text":"This label can be used to restrict access to a website to a CIDR range of IP's.","title":"Synopsis"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/#label","text":"open.container.forwarder.restrictip open.container.forwarder.restrictip.*","title":"Label"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/#value","text":"CIDR range, string","title":"Value"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/#details","text":"Example usage: Single CIDR range: open.container.forwarder.restrictip=x.x.x.x/XX Multiple ranges: open.container.forwarder.restrictip.1=x.x.x.x/XX open.container.forwarder.restrictip.2=x.x.x.x/XX open.container.forwarder.restrictip.3=x.x.x.x/XX","title":"Details"},{"location":"Documentation/Labels/Restrict%20to%20IP%20addresses/#note","text":"If the website is behind another reverse proxy you will need to configure trusted proxies as well. Configuring a trusted proxy allows Caddy to trust the x-forwarded-for header sent from the proxy which will then be used to determine the visitors IP address.","title":"Note"},{"location":"Documentation/Labels/TLS%20Providers/","text":"Synopsis This label configures how SSL certificates are obtained. Label open.container.forwarder.tlsprovider Value default , cloudflare or internal are the only valid options, string Details Default - This uses Caddy's default http validation. Cloudflare - This configures Caddy to use DNS validation, using Cloudflare DNS and API. Internal - This configures Caddy to generate it's own self-signed certificates.","title":"TLS Providers"},{"location":"Documentation/Labels/TLS%20Providers/#synopsis","text":"This label configures how SSL certificates are obtained.","title":"Synopsis"},{"location":"Documentation/Labels/TLS%20Providers/#label","text":"open.container.forwarder.tlsprovider","title":"Label"},{"location":"Documentation/Labels/TLS%20Providers/#value","text":"default , cloudflare or internal are the only valid options, string","title":"Value"},{"location":"Documentation/Labels/TLS%20Providers/#details","text":"Default - This uses Caddy's default http validation. Cloudflare - This configures Caddy to use DNS validation, using Cloudflare DNS and API. Internal - This configures Caddy to generate it's own self-signed certificates.","title":"Details"},{"location":"Documentation/Labels/Trusted%20Proxies/","text":"Synopsis This label is used to trust a proxy sending x-forwarded-* headers. Without configuring Trusted Proxies the x-forwarded-for headers will be ignored by Caddy. Read more about Caddy behaviour here Label open.container.forwarder.trustedproxies Value Space seperated list of CIDR ranges, string Details This label should be used when behind another reverse_proxy e.g. Cloudflare. Using Cloudflare as an example use-case, we can take the IP ranges from here and create a label like open.container.forwarder.trustedproxies= x.x.x.x/XX x.x.x.x/XX x.x.x.x/XX etc. With trusted proxies configured, Caddy will trust that the configured CIDR ranegs will send good x-forwarded-* values.","title":"Trusted Proxies"},{"location":"Documentation/Labels/Trusted%20Proxies/#synopsis","text":"This label is used to trust a proxy sending x-forwarded-* headers. Without configuring Trusted Proxies the x-forwarded-for headers will be ignored by Caddy. Read more about Caddy behaviour here","title":"Synopsis"},{"location":"Documentation/Labels/Trusted%20Proxies/#label","text":"open.container.forwarder.trustedproxies","title":"Label"},{"location":"Documentation/Labels/Trusted%20Proxies/#value","text":"Space seperated list of CIDR ranges, string","title":"Value"},{"location":"Documentation/Labels/Trusted%20Proxies/#details","text":"This label should be used when behind another reverse_proxy e.g. Cloudflare. Using Cloudflare as an example use-case, we can take the IP ranges from here and create a label like open.container.forwarder.trustedproxies= x.x.x.x/XX x.x.x.x/XX x.x.x.x/XX etc. With trusted proxies configured, Caddy will trust that the configured CIDR ranegs will send good x-forwarded-* values.","title":"Details"},{"location":"Examples/Example%20Containers/","text":"Intro Here I'll show some example docker-compose.yml files for some common apps working with OpenContainerForwarder. These examples are not designed to be production-ready and most applications at the least require a database (not included here), but hopefully these examples will make it clear how easy it is to get an application working with OpenContainerForwarder. Wordpress networks: proxy: external: true services: wordpress: image: wordpress volumes: - ./wp:/var/www/html labels: open.container.forwarder.port: \"80\" open.container.forwarder.hostname: \"wp.yourdomain.com\" networks: - proxy Gitea networks: proxy: external: true services: gitea: image: gitea/gitea:latest networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\" Jenkins networks: proxy: external: true services: jenkins: image: jenkins/jenkins:lts volumes: - ./jenkins_data:/var/jenkins_home labels: open.container.forwarder.port: \"8080\" open.container.forwarder.hostname: \"jenkins.yourdomain.com\" networks: - proxy Nextcloud networks: proxy: external: true services: nextcloud: image: nextcloud:production-apache volumes: - \"./data:/var/www/html\" labels: open.container.forwarder.hostname: \"nextcloud.yourdomain.com\" open.container.forwarder.port: \"80\" networks: - proxy","title":"Example Containers"},{"location":"Examples/Example%20Containers/#intro","text":"Here I'll show some example docker-compose.yml files for some common apps working with OpenContainerForwarder. These examples are not designed to be production-ready and most applications at the least require a database (not included here), but hopefully these examples will make it clear how easy it is to get an application working with OpenContainerForwarder.","title":"Intro"},{"location":"Examples/Example%20Containers/#wordpress","text":"networks: proxy: external: true services: wordpress: image: wordpress volumes: - ./wp:/var/www/html labels: open.container.forwarder.port: \"80\" open.container.forwarder.hostname: \"wp.yourdomain.com\" networks: - proxy","title":"Wordpress"},{"location":"Examples/Example%20Containers/#gitea","text":"networks: proxy: external: true services: gitea: image: gitea/gitea:latest networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\"","title":"Gitea"},{"location":"Examples/Example%20Containers/#jenkins","text":"networks: proxy: external: true services: jenkins: image: jenkins/jenkins:lts volumes: - ./jenkins_data:/var/jenkins_home labels: open.container.forwarder.port: \"8080\" open.container.forwarder.hostname: \"jenkins.yourdomain.com\" networks: - proxy","title":"Jenkins"},{"location":"Examples/Example%20Containers/#nextcloud","text":"networks: proxy: external: true services: nextcloud: image: nextcloud:production-apache volumes: - \"./data:/var/www/html\" labels: open.container.forwarder.hostname: \"nextcloud.yourdomain.com\" open.container.forwarder.port: \"80\" networks: - proxy","title":"Nextcloud"},{"location":"Examples/Example%20Use%20Cases/Cloudflare/","text":"Intro If all / the majority of your websites are behind a reverse proxy/cloudflare there are some useful default's that you can set globally. Using Cloudflare DNS for the TLS provider Certificates are verified through DNS records, caddy/cloudflare DNS plugin automatically add the required DNS records for verification using the Cloudflare API You need a Cloudflare API key which has permissions to add DNS records for your domains Within /opt/OpenContainerForwarder/.env configure the TLS provider + Cloudflare API key: DEFAULT_TLS_PROVIDER=cloudflare CLOUDFLARE_API_KEY=xxxxxx With this configuration all containers will use Cloudflare DNS for SSL verification using the specified API key, unless the container overrides these settings using the open.container.forwarder labels (open.container.forwarder.tlsprovider and open.container.forwarder.cloudflareapiKey) Trusted Proxies Caddy by default doesn't trust any x-forwarded- etc headers sent to it (e.g. sent by the Cloudflare proxy). By defining trusted proxies we can allow caddy to forward the x-forwarded- headers down to the container backends when the requests are from Cloudflare IP's. For Cloudflare you can grab the IP ranges from here and then configure them as your trusted proxies default with the following .env entry: DEFAULT_TRUSTED_PROXIES=xxx.xxx.xxx.xxx/XX x.x.x.x/XX xxx.x.xxx.x/XX This can be overridden on a per-container basis using the container label open.container.forwarder.trustedproxies (e.g. if a container/hostname is not using cloudflare)","title":"Cloudflare"},{"location":"Examples/Example%20Use%20Cases/Cloudflare/#intro","text":"If all / the majority of your websites are behind a reverse proxy/cloudflare there are some useful default's that you can set globally.","title":"Intro"},{"location":"Examples/Example%20Use%20Cases/Cloudflare/#using-cloudflare-dns-for-the-tls-provider","text":"Certificates are verified through DNS records, caddy/cloudflare DNS plugin automatically add the required DNS records for verification using the Cloudflare API You need a Cloudflare API key which has permissions to add DNS records for your domains Within /opt/OpenContainerForwarder/.env configure the TLS provider + Cloudflare API key: DEFAULT_TLS_PROVIDER=cloudflare CLOUDFLARE_API_KEY=xxxxxx With this configuration all containers will use Cloudflare DNS for SSL verification using the specified API key, unless the container overrides these settings using the open.container.forwarder labels (open.container.forwarder.tlsprovider and open.container.forwarder.cloudflareapiKey)","title":"Using Cloudflare DNS for the TLS provider"},{"location":"Examples/Example%20Use%20Cases/Cloudflare/#trusted-proxies","text":"Caddy by default doesn't trust any x-forwarded- etc headers sent to it (e.g. sent by the Cloudflare proxy). By defining trusted proxies we can allow caddy to forward the x-forwarded- headers down to the container backends when the requests are from Cloudflare IP's. For Cloudflare you can grab the IP ranges from here and then configure them as your trusted proxies default with the following .env entry: DEFAULT_TRUSTED_PROXIES=xxx.xxx.xxx.xxx/XX x.x.x.x/XX xxx.x.xxx.x/XX This can be overridden on a per-container basis using the container label open.container.forwarder.trustedproxies (e.g. if a container/hostname is not using cloudflare)","title":"Trusted Proxies"},{"location":"Examples/Example%20Use%20Cases/Podman/","text":"Warning This section of the documentation is currently WIP Intro Podman is not currently supported however has been tested and appears to be working. This is due to the podman API implementing a Docker compatible API. The testing environment Podman running in root mode (So it can bind to port 80/443 - this should be able to be resolved root-less using net.ipv4.ip_unprivileged_port_start as described here ) Podman socket available at /var/run/podman/podman.sock Arch used as host OS Podman using netavark as network backend with aardvark-dns setup for container DNS resolution Instructions Set the DOCKER_HOST var so docker & docker-compose commands use the podman socket export DOCKER_HOST='unix:///var/run/podman/podman.sock' Create the proxy network podman network create proxy (optional) For dev only, disable buildkit export DOCKER_BUILDKIT=0 Follow the Quick start . Ignoring the \"Create docker network\" step. Within the .env file set the CONTAINER_SOCKET variable to the podman socket location.","title":"Podman"},{"location":"Examples/Example%20Use%20Cases/Podman/#warning","text":"This section of the documentation is currently WIP","title":"Warning"},{"location":"Examples/Example%20Use%20Cases/Podman/#intro","text":"Podman is not currently supported however has been tested and appears to be working. This is due to the podman API implementing a Docker compatible API.","title":"Intro"},{"location":"Examples/Example%20Use%20Cases/Podman/#the-testing-environment","text":"Podman running in root mode (So it can bind to port 80/443 - this should be able to be resolved root-less using net.ipv4.ip_unprivileged_port_start as described here ) Podman socket available at /var/run/podman/podman.sock Arch used as host OS Podman using netavark as network backend with aardvark-dns setup for container DNS resolution","title":"The testing environment"},{"location":"Examples/Example%20Use%20Cases/Podman/#instructions","text":"Set the DOCKER_HOST var so docker & docker-compose commands use the podman socket export DOCKER_HOST='unix:///var/run/podman/podman.sock' Create the proxy network podman network create proxy (optional) For dev only, disable buildkit export DOCKER_BUILDKIT=0 Follow the Quick start . Ignoring the \"Create docker network\" step. Within the .env file set the CONTAINER_SOCKET variable to the podman socket location.","title":"Instructions"}]}