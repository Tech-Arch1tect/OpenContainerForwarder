{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Open Container Forwarder is a project which aims to automate caddy configuration for proxying to docker containers. Container labels are used to configure specifics such as hostnames and container ports, etc. Quick start Full documentation","title":"Home"},{"location":"#home","text":"Open Container Forwarder is a project which aims to automate caddy configuration for proxying to docker containers. Container labels are used to configure specifics such as hostnames and container ports, etc. Quick start Full documentation","title":"Home"},{"location":"Quick%20Start/","text":"Intro This page demonstrates an example deploy using the docker-compose configuration . Create docker network This network will have OpenContainerForwarder/Caddy and any Docker containers that will be proxied to. docker network create proxy Clone the base docker-compose setup cd /opt/ git clone https://github.com/Tech-Arch1tect/OpenContainerForwarder-base.git OpenContainerForwarder Copy example environment variables cd /opt/OpenContainerForwarder/ cp sample.env .env Review environment variables Check the VERSION variable is the latest version (or otherwise intended version) Unless you specifically want another TLS provider, it is advised to keep DEFAULT_TLS_PROVIDER=default Keep the web dashboard disabled - this is WIP/Insecure (and has no authentication currently) Start Open Container Forwarder & caddy cd /opt/OpenContainerForwarder docker-compose up -d Start an example container (gitea) Before proceeding please configure your DNS A record for your hostname to point at your server running OpenContainerforwarder (yourdomain.com will be used as an example) Gitea is used as an example service cd /opt/ mkdir gitea cd gitea; vi docker-compose.yml Paste in the following content (changing yourdomain.com to your domain): version: \"2\" networks: proxy: external: true services: gitea: image: gitea/gitea:latest restart: always networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\" Notes: The Gitea container is on the proxy network The labels define the hostname that will be configured in Caddy and the port that you want to proxy to (in this case Gitea is listening on port 3000 within the container) Start the gitea container docker-compose up -d Wait 30 seconds, and visit gitea.yourdomain.com. You should be presented with the gitea welcome page. If you have any issues checkout the trouble shooting examples and create a github issue if you need any assistance.","title":"Quick Start"},{"location":"Quick%20Start/#intro","text":"This page demonstrates an example deploy using the docker-compose configuration .","title":"Intro"},{"location":"Quick%20Start/#create-docker-network","text":"This network will have OpenContainerForwarder/Caddy and any Docker containers that will be proxied to. docker network create proxy","title":"Create docker network"},{"location":"Quick%20Start/#clone-the-base-docker-compose-setup","text":"cd /opt/ git clone https://github.com/Tech-Arch1tect/OpenContainerForwarder-base.git OpenContainerForwarder","title":"Clone the base docker-compose setup"},{"location":"Quick%20Start/#copy-example-environment-variables","text":"cd /opt/OpenContainerForwarder/ cp sample.env .env","title":"Copy example environment variables"},{"location":"Quick%20Start/#review-environment-variables","text":"Check the VERSION variable is the latest version (or otherwise intended version) Unless you specifically want another TLS provider, it is advised to keep DEFAULT_TLS_PROVIDER=default Keep the web dashboard disabled - this is WIP/Insecure (and has no authentication currently)","title":"Review environment variables"},{"location":"Quick%20Start/#start-open-container-forwarder-caddy","text":"cd /opt/OpenContainerForwarder docker-compose up -d","title":"Start Open Container Forwarder &amp; caddy"},{"location":"Quick%20Start/#start-an-example-container-gitea","text":"Before proceeding please configure your DNS A record for your hostname to point at your server running OpenContainerforwarder (yourdomain.com will be used as an example) Gitea is used as an example service cd /opt/ mkdir gitea cd gitea; vi docker-compose.yml Paste in the following content (changing yourdomain.com to your domain): version: \"2\" networks: proxy: external: true services: gitea: image: gitea/gitea:latest restart: always networks: - proxy volumes: - ./gitea:/data labels: open.container.forwarder.port: \"3000\" open.container.forwarder.hostname: \"gitea.yourdomain.com\" Notes: The Gitea container is on the proxy network The labels define the hostname that will be configured in Caddy and the port that you want to proxy to (in this case Gitea is listening on port 3000 within the container)","title":"Start an example container (gitea)"},{"location":"Quick%20Start/#start-the-gitea-container","text":"docker-compose up -d Wait 30 seconds, and visit gitea.yourdomain.com. You should be presented with the gitea welcome page. If you have any issues checkout the trouble shooting examples and create a github issue if you need any assistance.","title":"Start the gitea container"},{"location":"troubleshooting/","text":"TODO","title":"Troubleshooting"},{"location":"Documentation/","text":"TODO","title":"Index"},{"location":"Documentation/Example%20Use%20Cases/Cloudflare/","text":"Intro If all / the majority of your websites are behind a reverse proxy/cloudflare there are some useful default's that you can set globally. Using Cloudflare DNS for the TLS provider Certificates are verified through DNS records, caddy/cloudflare DNS plugin automatically add the required DNS records for verification using the Cloudflare API You need a Cloudflare API key which has permissions to add DNS records for your domains Within /opt/OpenContainerForwarder/.env configure the TLS provider + Cloudflare API key: DEFAULT_TLS_PROVIDER=cloudflare CLOUDFLARE_API_KEY=xxxxxx With this configuration all containers will use Cloudflare DNS for SSL verification using the specified API key, unless the container overrides these settings using the open.container.forwarder labels (open.container.forwarder.tlsprovider and open.container.forwarder.cloudflareapiKey) Trusted Proxies Caddy by default doesn't trust any x-forwarded- etc headers sent to it (e.g. sent by the Cloudflare proxy). By defining trusted proxies we can allow caddy to forward the x-forwarded- headers down to the container backends when the requests are from Cloudflare IP's. For Cloudflare you can grab the IP ranges from here and then configure them as your trusted proxies default with the following .env entry: DEFAULT_TRUSTED_PROXIES=xxx.xxx.xxx.xxx/XX x.x.x.x/XX xxx.x.xxx.x/XX This can be overridden on a per-container basis using the container label open.container.forwarder.trustedproxies (e.g. if a container/hostname is not using cloudflare)","title":"Cloudflare"},{"location":"Documentation/Example%20Use%20Cases/Cloudflare/#intro","text":"If all / the majority of your websites are behind a reverse proxy/cloudflare there are some useful default's that you can set globally.","title":"Intro"},{"location":"Documentation/Example%20Use%20Cases/Cloudflare/#using-cloudflare-dns-for-the-tls-provider","text":"Certificates are verified through DNS records, caddy/cloudflare DNS plugin automatically add the required DNS records for verification using the Cloudflare API You need a Cloudflare API key which has permissions to add DNS records for your domains Within /opt/OpenContainerForwarder/.env configure the TLS provider + Cloudflare API key: DEFAULT_TLS_PROVIDER=cloudflare CLOUDFLARE_API_KEY=xxxxxx With this configuration all containers will use Cloudflare DNS for SSL verification using the specified API key, unless the container overrides these settings using the open.container.forwarder labels (open.container.forwarder.tlsprovider and open.container.forwarder.cloudflareapiKey)","title":"Using Cloudflare DNS for the TLS provider"},{"location":"Documentation/Example%20Use%20Cases/Cloudflare/#trusted-proxies","text":"Caddy by default doesn't trust any x-forwarded- etc headers sent to it (e.g. sent by the Cloudflare proxy). By defining trusted proxies we can allow caddy to forward the x-forwarded- headers down to the container backends when the requests are from Cloudflare IP's. For Cloudflare you can grab the IP ranges from here and then configure them as your trusted proxies default with the following .env entry: DEFAULT_TRUSTED_PROXIES=xxx.xxx.xxx.xxx/XX x.x.x.x/XX xxx.x.xxx.x/XX This can be overridden on a per-container basis using the container label open.container.forwarder.trustedproxies (e.g. if a container/hostname is not using cloudflare)","title":"Trusted Proxies"},{"location":"Documentation/Labels/Access%20Logs/","text":"TODO","title":"Access Logs"},{"location":"Documentation/Labels/Hostname/","text":"TODO","title":"Hostname"},{"location":"Documentation/Labels/Ports/","text":"TODO","title":"Ports"},{"location":"Documentation/Labels/TLS%20Providers/","text":"TODO","title":"TLS Providers"},{"location":"Documentation/Labels/Trusted%20Proxies/","text":"TODO","title":"Trusted Proxies"}]}